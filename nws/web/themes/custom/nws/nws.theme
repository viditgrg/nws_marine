<?php

/**
 * @file
 * Functions to support theming in the nws theme.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\views\Form\ViewsForm;
use Drupal\file\Entity\File;
use Drupal\media\Entity\Media;

/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 */
function nws_preprocess_paragraph(&$variables)
{
  if ($node = \Drupal::request()->attributes->get('node')) {
    $variables['nid'] = $node->id();
  }
}

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function nws_form_system_theme_settings_alter(&$form, FormStateInterface $form_state)
{
  $form['facebook'] = array(
    '#type' => 'textfield',
    '#title' => 'facebook',
    '#default_value' => theme_get_setting('facebook'),
  );

  $form['instagram'] = array(
    '#type' => 'textfield',
    '#title' => 'Instagram',
    '#default_value' => theme_get_setting('instagram'),
  );

  $form['youtube'] = array(
    '#type' => 'textfield',
    '#title' => 'Youtube',
    '#default_value' => theme_get_setting('youtube'),
  );

  $form['linkedin'] = array(
    '#type' => 'textfield',
    '#title' => 'Linkedin',
    '#default_value' => theme_get_setting('linkedin'),
  );

  $form['twitter'] = array(
    '#type' => 'textfield',
    '#title' => 'Twitter',
    '#default_value' => theme_get_setting('twitter'),
  );
}

function nws_preprocess_page(&$variables)
{
  $variables['facebook'] = theme_get_setting('facebook');
  $variables['youtube'] = theme_get_setting('youtube');
  $variables['instagram'] = theme_get_setting('instagram');
  $variables['twitter'] = theme_get_setting('twitter');
  $variables['linkedin'] = theme_get_setting('linkedin');

  // dump("jhds isdh iu");

  if ($node = \Drupal::routeMatch()->getParameter('node')) {

    // if (is_numeric($node) && $node->getType() == 'detail_page') {
    if ($node->getType() == 'detail_page') {

      $banner_img = $node->field_banner_image->target_id;
      $file = File::load($banner_img);
      $uri = $file->getFileUri();
      $url = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);

      $variables['node_title'] = $node->title->value;
      $variables['url'] = $url;
    }
  }
}
/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function nws_preprocess_html(&$variables)
{
  // Add information about the number of sidebars.
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-two-sidebars';
  } elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-first';
  } elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-second';
  } else {
    $variables['attributes']['class'][] = 'layout-no-sidebars';
  }

  if (!empty($variables['page']['featured_top'])) {
    $variables['attributes']['class'][] = 'has-featured-top';
  }
  // Add node ID to the body class.
  $node = \Drupal::routeMatch()->getParameter('node');
  if (is_object($node)) {
    $variables['attributes']['class'][] = 'node-' . $node->id();
  }
}

/**
 * Implements hook_preprocess_HOOK() for page title templates.
 */
function nws_preprocess_page_title(&$variables)
{
  // Since the title and the shortcut link are both block level elements,
  // positioning them next to each other is much simpler with a wrapper div.
  if (!empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']) {
    // Add a wrapper div using the title_prefix and title_suffix render
    // elements.
    $variables['title_prefix']['shortcut_wrapper'] = [
      '#markup' => '<div class="shortcut-wrapper clearfix">',
      '#weight' => 100,
    ];
    $variables['title_suffix']['shortcut_wrapper'] = [
      '#markup' => '</div>',
      '#weight' => -99,
    ];
    // Make sure the shortcut link is the first item in title_suffix.
    $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;
  }
}

/**
 * Implements hook_preprocess_HOOK() for nwsntenance-page.html.twig.
 */
function nws_preprocess_nwsntenance_page(&$variables)
{
  // By default, site_name is set to Drupal if no db connection is available
  // or during site installation. Setting site_name to an empty string makes
  // the site and update pages look cleaner.
  // @see template_preprocess_nwsntenance_page
  if (!$variables['db_is_active']) {
    $variables['site_name'] = '';
  }

  // nws has custom styling for the nwsntenance page.
  $variables['#attached']['library'][] = 'nws/nwsntenance_page';
}


/**
 * Implements HOOK_theme_suggestions_HOOK_alter().
 */
function nws_theme_suggestions_page_alter(array &$suggestions, array $variables)
{
  // Add a template suggestions for node type.
  //@var \Drupal\node\NodeInterface $node /
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if (is_numeric($node)) {
      $node = Node::load($node);
    }

    $suggestions[] = 'page__node__' . $node->bundle();
  }
}


/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function nws_preprocess_node(&$variables)
{
  // Remove the "Add new comment" link on teasers or when the comment form is
  // displayed on the page.
  if ($variables['teaser'] || !empty($variables['content']['comments']['comment_form'])) {
    unset($variables['content']['links']['comment']['#links']['comment-add']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function nws_preprocess_block(&$variables)
{
  // Add a clearfix class to system branding blocks.
  if ($variables['plugin_id'] == 'system_branding_block') {
    $variables['attributes']['class'][] = 'clearfix';
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function nws_preprocess_menu(&$variables)
{
  $variables['attributes']['class'][] = 'clearfix';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function nws_theme_suggestions_form_alter(array &$suggestions, array $variables)
{
  if ($variables['element']['#form_id'] == 'search_block_form') {
    $suggestions[] = 'form__search_block_form';
  }
}


/**
 * Implements hook_theme_suggestions_HOOK_alter() for block templates.
 */
function nws_theme_suggestions_block_alter(array &$suggestions, array $variables)
{
  // Block suggestions for custom block types.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__type__' . $variables['elements']['content']['#block_content']->bundle());
  }
}


/**
 * Implements hook_form_alter().
 */
function nws_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  // Add classes to the search form.
  if (in_array($form_id, ['search_block_form', 'search_form'])) {
    $key = ($form_id == 'search_block_form') ? 'actions' : 'basic';
    if (!isset($form[$key]['submit']['#attributes'])) {
      $form[$key]['submit']['#attributes'] = new Attribute();
    }
    $form[$key]['submit']['#attributes']->addClass('search-form__submit');
  }

  $form_object = $form_state->getFormObject();

  // Add class to the Media Library views form.
  if ($form_object instanceof ViewsForm && strpos($form_object->getBaseFormId(), 'views_form_media_library') === 0) {
    // The conditional below exists because the media-library-views-form class
    // is currently added by Classy, but Umami will eventually not use Classy as
    // a base theme.
    // @todo remove conditional, keep class addition in
    //   https://drupal.org/node/3110137
    // @see https://www.drupal.org/node/3109287
    // @see classy_form_alter()
    if (!isset($form['#attributes']['class']) || !in_array('media-library-views-form', $form['#attributes']['class'])) {
      $form['#attributes']['class'][] = 'media-library-views-form';
    }
  }
}

/**
 * Implements hook_preprocess_links__media_library_menu().
 *
 * This targets the menu of available media types in the media library's modal
 * dialog.
 *
 * @todo Do this in the relevant template once
 *   https://www.drupal.org/project/drupal/issues/3088856 is resolved.
 */
function nws_preprocess_links__media_library_menu(array &$variables)
{
  foreach ($variables['links'] as &$link) {
    // This conditional exists because the media-library-menu__link class is
    // currently added by Classy, but nws will eventually not use Classy as a
    // base theme.
    // @todo remove conditional, keep class addition in
    //   https://drupal.org/node/3110137
    // @see https://www.drupal.org/node/3109287
    // @see classy_preprocess_links__media_library_menu()
    if (!isset($link['link']['#options']['attributes']['class']) || !in_array('media-library-menu__link', $link['link']['#options']['attributes']['class'])) {
      $link['link']['#options']['attributes']['class'][] = 'media-library-menu__link';
    }
  }
}

/**
 * Implements hook_preprocess_image_widget().
 *
 * @todo Revisit in https://drupal.org/node/3117430
 */
function nws_preprocess_image_widget(&$variables)
{
  if (!empty($variables['element']['fids']['#value'])) {
    $file = reset($variables['element']['#files']);
    $variables['data']["file_{$file->id()}"]['filename']['#suffix'] = ' <span class="file-size">(' . format_size($file->getSize()) . ')</span> ';
  }
}

/**
 * Implements template_preprocess_links().
 *
 * This makes it so array keys of #links items are added as a class. This
 * functionality was removed in Drupal 8.1, but still necessary in some
 * instances.
 *
 * @todo remove in https://drupal.org/node/3120962
 */
function nws_preprocess_links(&$variables)
{
  if (!empty($variables['links'])) {
    foreach ($variables['links'] as $key => $value) {
      if (!is_numeric($key)) {
        $class = Html::getClass($key);
        $variables['links'][$key]['attributes']->addClass($class);
      }
    }
  }
}


function nws_preprocess_views_view(&$variables)
{
  $view = $variables['view'];
  $rows = $variables['rows'];
  $variables['view_result_count'] = count($view->result);
}
